
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001ec0  08001ec0  00002ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef0  08001ef0  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ef0  08001ef0  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ef0  08001ef0  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef0  08001ef0  00002ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ef4  08001ef4  00002ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001ef8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08001f08  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001f08  00003094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004baf  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001298  00000000  00000000  00007be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00008e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000479  00000000  00000000  00009488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dc8  00000000  00000000  00009901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ab8  00000000  00000000  0001f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd20  00000000  00000000  00026181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3ea1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000170c  00000000  00000000  000a3ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000a55f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ea8 	.word	0x08001ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001ea8 	.word	0x08001ea8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd00 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f878 	bl	800024c <MX_GPIO_Init>
  MX_SPI2_Init();
 800015c:	f000 f840 	bl	80001e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  switchToLightTrafficMode();
 8000160:	f000 fa72 	bl	8000648 <switchToLightTrafficMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateState();
 8000164:	f000 f96e 	bl	8000444 <updateState>
 8000168:	e7fc      	b.n	8000164 <main+0x18>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	@ 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	@ 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f001 fe68 	bl	8001e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800018c:	2302      	movs	r3, #2
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000190:	2301      	movs	r3, #1
 8000192:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000194:	2310      	movs	r3, #16
 8000196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000198:	2300      	movs	r3, #0
 800019a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800019c:	f107 0318 	add.w	r3, r7, #24
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 fff5 	bl	8001190 <HAL_RCC_OscConfig>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ac:	f000 fbf6 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b0:	230f      	movs	r3, #15
 80001b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fa63 	bl	8001694 <HAL_RCC_ClockConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001d4:	f000 fbe2 	bl	800099c <Error_Handler>
  }
}
 80001d8:	bf00      	nop
 80001da:	3740      	adds	r7, #64	@ 0x40
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80001e4:	4b17      	ldr	r3, [pc, #92]	@ (8000244 <MX_SPI2_Init+0x64>)
 80001e6:	4a18      	ldr	r2, [pc, #96]	@ (8000248 <MX_SPI2_Init+0x68>)
 80001e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80001ea:	4b16      	ldr	r3, [pc, #88]	@ (8000244 <MX_SPI2_Init+0x64>)
 80001ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80001f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80001f2:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <MX_SPI2_Init+0x64>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80001f8:	4b12      	ldr	r3, [pc, #72]	@ (8000244 <MX_SPI2_Init+0x64>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80001fe:	4b11      	ldr	r3, [pc, #68]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000204:	4b0f      	ldr	r3, [pc, #60]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <MX_SPI2_Init+0x64>)
 800020c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000210:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000212:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000218:	4b0a      	ldr	r3, [pc, #40]	@ (8000244 <MX_SPI2_Init+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800021e:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000224:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <MX_SPI2_Init+0x64>)
 800022c:	220a      	movs	r2, #10
 800022e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <MX_SPI2_Init+0x64>)
 8000232:	f001 fb8b 	bl	800194c <HAL_SPI_Init>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800023c:	f000 fbae 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	2000002c 	.word	0x2000002c
 8000248:	40003800 	.word	0x40003800

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000260:	4b1e      	ldr	r3, [pc, #120]	@ (80002dc <MX_GPIO_Init+0x90>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1d      	ldr	r2, [pc, #116]	@ (80002dc <MX_GPIO_Init+0x90>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <MX_GPIO_Init+0x90>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0308 	and.w	r3, r3, #8
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <MX_GPIO_Init+0x90>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a17      	ldr	r2, [pc, #92]	@ (80002dc <MX_GPIO_Init+0x90>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <MX_GPIO_Init+0x90>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000296:	4812      	ldr	r0, [pc, #72]	@ (80002e0 <MX_GPIO_Init+0x94>)
 8000298:	f000 ff61 	bl	800115e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800029c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80002a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	4619      	mov	r1, r3
 80002b4:	480a      	ldr	r0, [pc, #40]	@ (80002e0 <MX_GPIO_Init+0x94>)
 80002b6:	f000 fdb7 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80002ba:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80002be:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c8:	f107 0308 	add.w	r3, r7, #8
 80002cc:	4619      	mov	r1, r3
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_GPIO_Init+0x98>)
 80002d0:	f000 fdaa 	bl	8000e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <isButtonPressed>:

/* USER CODE BEGIN 4 */

uint8_t isButtonPressed(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	807b      	strh	r3, [r7, #2]
    static uint32_t lastDebounceTime = 0;
    uint32_t debounceDelay = 50; // Thời gian debounce 50ms
 80002f4:	2332      	movs	r3, #50	@ 0x32
 80002f6:	60fb      	str	r3, [r7, #12]

    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET)
 80002f8:	887b      	ldrh	r3, [r7, #2]
 80002fa:	4619      	mov	r1, r3
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 ff17 	bl	8001130 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d117      	bne.n	8000338 <isButtonPressed+0x50>
    {
        uint32_t currentTime = HAL_GetTick();
 8000308:	f000 fc7c 	bl	8000c04 <HAL_GetTick>
 800030c:	60b8      	str	r0, [r7, #8]
        if ((currentTime - lastDebounceTime) >= debounceDelay)
 800030e:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <isButtonPressed+0x5c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d80d      	bhi.n	8000338 <isButtonPressed+0x50>
        {
            lastDebounceTime = currentTime;
 800031c:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <isButtonPressed+0x5c>)
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	6013      	str	r3, [r2, #0]
            // Đợi cho đến khi nút được thả ra
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);
 8000322:	bf00      	nop
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f000 ff01 	bl	8001130 <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f7      	beq.n	8000324 <isButtonPressed+0x3c>
            return 1;
 8000334:	2301      	movs	r3, #1
 8000336:	e000      	b.n	800033a <isButtonPressed+0x52>
        }
    }
    return 0;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000008c 	.word	0x2000008c

08000348 <shiftOut>:

// Function to send data to the shift register via SPI
void shiftOut(uint8_t data) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_RESET);  				// Pull NSS low to start transmission
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000358:	4809      	ldr	r0, [pc, #36]	@ (8000380 <shiftOut+0x38>)
 800035a:	f000 ff00 	bl	800115e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(SEVEN_LED_SEG_SPI, &data, 1, HAL_MAX_DELAY);  		// Send data
 800035e:	1df9      	adds	r1, r7, #7
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	2201      	movs	r2, #1
 8000366:	4807      	ldr	r0, [pc, #28]	@ (8000384 <shiftOut+0x3c>)
 8000368:	f001 fb74 	bl	8001a54 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_SET);    				// Pull NSS high to end transmission
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000372:	4803      	ldr	r0, [pc, #12]	@ (8000380 <shiftOut+0x38>)
 8000374:	f000 fef3 	bl	800115e <HAL_GPIO_WritePin>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010c00 	.word	0x40010c00
 8000384:	2000002c 	.word	0x2000002c

08000388 <displayNumber>:




// Function to display a two-digit number
void displayNumber(uint8_t number) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    if (number > 99) return;  			// Limit to 2 digits
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b63      	cmp	r3, #99	@ 0x63
 8000396:	d823      	bhi.n	80003e0 <displayNumber+0x58>

    uint8_t tens = number / 10;      	// Extract tens digit
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <displayNumber+0x60>)
 800039c:	fba2 2303 	umull	r2, r3, r2, r3
 80003a0:	08db      	lsrs	r3, r3, #3
 80003a2:	73fb      	strb	r3, [r7, #15]
    uint8_t units = number % 10;     	// Extract units digit
 80003a4:	79fa      	ldrb	r2, [r7, #7]
 80003a6:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <displayNumber+0x60>)
 80003a8:	fba3 1302 	umull	r1, r3, r3, r2
 80003ac:	08d9      	lsrs	r1, r3, #3
 80003ae:	460b      	mov	r3, r1
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	440b      	add	r3, r1
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	73bb      	strb	r3, [r7, #14]

    // Send tens digit to first 7-segment display
    shiftOut(digitCodes[units]);
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	4a0b      	ldr	r2, [pc, #44]	@ (80003ec <displayNumber+0x64>)
 80003be:	5cd3      	ldrb	r3, [r2, r3]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ffc1 	bl	8000348 <shiftOut>
    HAL_Delay(5);  // Small delay to stabilize display
 80003c6:	2005      	movs	r0, #5
 80003c8:	f000 fc26 	bl	8000c18 <HAL_Delay>

    // Send units digit to second 7-segment display
    shiftOut(digitCodes[tens]);
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <displayNumber+0x64>)
 80003d0:	5cd3      	ldrb	r3, [r2, r3]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffb8 	bl	8000348 <shiftOut>
    HAL_Delay(5);  // Small delay to stabilize display
 80003d8:	2005      	movs	r0, #5
 80003da:	f000 fc1d 	bl	8000c18 <HAL_Delay>
 80003de:	e000      	b.n	80003e2 <displayNumber+0x5a>
    if (number > 99) return;  			// Limit to 2 digits
 80003e0:	bf00      	nop
}
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	cccccccd 	.word	0xcccccccd
 80003ec:	08001ec0 	.word	0x08001ec0

080003f0 <countDownNum>:



// Function to CountDown number
void countDownNum(uint8_t number){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
	// Loop displaying number
	for (int8_t i = number; i >= 0; i--) {
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	e017      	b.n	8000430 <countDownNum+0x40>
		uint32_t start_time = HAL_GetTick();
 8000400:	f000 fc00 	bl	8000c04 <HAL_GetTick>
 8000404:	60b8      	str	r0, [r7, #8]
		displayNumber(i);      	// Display xx to 00
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ffbd 	bl	8000388 <displayNumber>
		while (HAL_GetTick() - start_time < 1000) {
 800040e:	e001      	b.n	8000414 <countDownNum+0x24>
			detect_button();
 8000410:	f000 f844 	bl	800049c <detect_button>
		while (HAL_GetTick() - start_time < 1000) {
 8000414:	f000 fbf6 	bl	8000c04 <HAL_GetTick>
 8000418:	4602      	mov	r2, r0
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000422:	d3f5      	bcc.n	8000410 <countDownNum+0x20>
	for (int8_t i = number; i >= 0; i--) {
 8000424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	3b01      	subs	r3, #1
 800042c:	b2db      	uxtb	r3, r3
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dae3      	bge.n	8000400 <countDownNum+0x10>
		}
	}
}
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <updateState>:


void updateState(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
    if (normal_mode_flag)
 8000448:	4b10      	ldr	r3, [pc, #64]	@ (800048c <updateState+0x48>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	b2db      	uxtb	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <updateState+0x14>
    {
        switchToLightTrafficMode();
 8000452:	f000 f8f9 	bl	8000648 <switchToLightTrafficMode>
    }
    else if (control_mode_flag)
    {
        switchToControlMode();
    }
}
 8000456:	e016      	b.n	8000486 <updateState+0x42>
    else if (heavy_mode_flag)
 8000458:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <updateState+0x4c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <updateState+0x24>
        switchToHeavyTrafficMode();
 8000462:	f000 f955 	bl	8000710 <switchToHeavyTrafficMode>
}
 8000466:	e00e      	b.n	8000486 <updateState+0x42>
    else if (night_mode_flag)
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <updateState+0x50>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <updateState+0x34>
        switchToNightMode();
 8000472:	f000 f9b1 	bl	80007d8 <switchToNightMode>
}
 8000476:	e006      	b.n	8000486 <updateState+0x42>
    else if (control_mode_flag)
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <updateState+0x54>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <updateState+0x42>
        switchToControlMode();
 8000482:	f000 f9e7 	bl	8000854 <switchToControlMode>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000
 8000490:	20000085 	.word	0x20000085
 8000494:	20000086 	.word	0x20000086
 8000498:	20000087 	.word	0x20000087

0800049c <detect_button>:

void detect_button(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	if (isButtonPressed(GPIOB, GPIO_PIN_5)) {
 80004a0:	2120      	movs	r1, #32
 80004a2:	4862      	ldr	r0, [pc, #392]	@ (800062c <detect_button+0x190>)
 80004a4:	f7ff ff20 	bl	80002e8 <isButtonPressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d01e      	beq.n	80004ec <detect_button+0x50>
		normal_mode_flag = 1;
 80004ae:	4b60      	ldr	r3, [pc, #384]	@ (8000630 <detect_button+0x194>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
		heavy_mode_flag = 0;
 80004b4:	4b5f      	ldr	r3, [pc, #380]	@ (8000634 <detect_button+0x198>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
		night_mode_flag = 0;
 80004ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000638 <detect_button+0x19c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
		control_mode_flag = 0;
 80004c0:	4b5e      	ldr	r3, [pc, #376]	@ (800063c <detect_button+0x1a0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
		lastbutton = 0;
 80004c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000640 <detect_button+0x1a4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
		direction = 0;
 80004cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000644 <detect_button+0x1a8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004d8:	4854      	ldr	r0, [pc, #336]	@ (800062c <detect_button+0x190>)
 80004da:	f000 fe40 	bl	800115e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004e4:	4851      	ldr	r0, [pc, #324]	@ (800062c <detect_button+0x190>)
 80004e6:	f000 fe3a 	bl	800115e <HAL_GPIO_WritePin>
    	lastbutton = 1;
    	direction = ~direction;
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
    }
}
 80004ea:	e09c      	b.n	8000626 <detect_button+0x18a>
	else if (isButtonPressed(GPIOB, GPIO_PIN_6)) {
 80004ec:	2140      	movs	r1, #64	@ 0x40
 80004ee:	484f      	ldr	r0, [pc, #316]	@ (800062c <detect_button+0x190>)
 80004f0:	f7ff fefa 	bl	80002e8 <isButtonPressed>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d01e      	beq.n	8000538 <detect_button+0x9c>
		normal_mode_flag = 0;
 80004fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000630 <detect_button+0x194>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		heavy_mode_flag = 1;
 8000500:	4b4c      	ldr	r3, [pc, #304]	@ (8000634 <detect_button+0x198>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
		night_mode_flag = 0;
 8000506:	4b4c      	ldr	r3, [pc, #304]	@ (8000638 <detect_button+0x19c>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
		control_mode_flag = 0;
 800050c:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <detect_button+0x1a0>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
		lastbutton = 0;
 8000512:	4b4b      	ldr	r3, [pc, #300]	@ (8000640 <detect_button+0x1a4>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
		direction = 0;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <detect_button+0x1a8>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000524:	4841      	ldr	r0, [pc, #260]	@ (800062c <detect_button+0x190>)
 8000526:	f000 fe1a 	bl	800115e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4168 	mov.w	r1, #59392	@ 0xe800
 8000530:	483e      	ldr	r0, [pc, #248]	@ (800062c <detect_button+0x190>)
 8000532:	f000 fe14 	bl	800115e <HAL_GPIO_WritePin>
}
 8000536:	e076      	b.n	8000626 <detect_button+0x18a>
	else if (isButtonPressed(GPIOB, GPIO_PIN_7)) {
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	483c      	ldr	r0, [pc, #240]	@ (800062c <detect_button+0x190>)
 800053c:	f7ff fed4 	bl	80002e8 <isButtonPressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d01e      	beq.n	8000584 <detect_button+0xe8>
		normal_mode_flag = 0;
 8000546:	4b3a      	ldr	r3, [pc, #232]	@ (8000630 <detect_button+0x194>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
		heavy_mode_flag = 0;
 800054c:	4b39      	ldr	r3, [pc, #228]	@ (8000634 <detect_button+0x198>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
		night_mode_flag = 1;
 8000552:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <detect_button+0x19c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
		control_mode_flag = 0;
 8000558:	4b38      	ldr	r3, [pc, #224]	@ (800063c <detect_button+0x1a0>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
		lastbutton = 0;
 800055e:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <detect_button+0x1a4>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
		direction = 0;
 8000564:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <detect_button+0x1a8>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	482e      	ldr	r0, [pc, #184]	@ (800062c <detect_button+0x190>)
 8000572:	f000 fdf4 	bl	800115e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 4158 	mov.w	r1, #55296	@ 0xd800
 800057c:	482b      	ldr	r0, [pc, #172]	@ (800062c <detect_button+0x190>)
 800057e:	f000 fdee 	bl	800115e <HAL_GPIO_WritePin>
}
 8000582:	e050      	b.n	8000626 <detect_button+0x18a>
	else if (isButtonPressed(GPIOB, GPIO_PIN_8)) {
 8000584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000588:	4828      	ldr	r0, [pc, #160]	@ (800062c <detect_button+0x190>)
 800058a:	f7ff fead 	bl	80002e8 <isButtonPressed>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d01e      	beq.n	80005d2 <detect_button+0x136>
		normal_mode_flag = 0;
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <detect_button+0x194>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
		heavy_mode_flag = 0;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <detect_button+0x198>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		night_mode_flag = 0;
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <detect_button+0x19c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
		control_mode_flag = 1;
 80005a6:	4b25      	ldr	r3, [pc, #148]	@ (800063c <detect_button+0x1a0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
		lastbutton = 0;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <detect_button+0x1a4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
		direction = 0;
 80005b2:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <detect_button+0x1a8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005be:	481b      	ldr	r0, [pc, #108]	@ (800062c <detect_button+0x190>)
 80005c0:	f000 fdcd 	bl	800115e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4138 	mov.w	r1, #47104	@ 0xb800
 80005ca:	4818      	ldr	r0, [pc, #96]	@ (800062c <detect_button+0x190>)
 80005cc:	f000 fdc7 	bl	800115e <HAL_GPIO_WritePin>
}
 80005d0:	e029      	b.n	8000626 <detect_button+0x18a>
    else if (isButtonPressed(GPIOB, GPIO_PIN_9)) {
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	4815      	ldr	r0, [pc, #84]	@ (800062c <detect_button+0x190>)
 80005d8:	f7ff fe86 	bl	80002e8 <isButtonPressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d021      	beq.n	8000626 <detect_button+0x18a>
    	normal_mode_flag = 0;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <detect_button+0x194>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
    	heavy_mode_flag = 0;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <detect_button+0x198>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
    	night_mode_flag = 0;
 80005ee:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <detect_button+0x19c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
    	control_mode_flag = 1;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <detect_button+0x1a0>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
    	lastbutton = 1;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <detect_button+0x1a4>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
    	direction = ~direction;
 8000600:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <detect_button+0x1a8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <detect_button+0x1a8>)
 800060c:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <detect_button+0x190>)
 8000616:	f000 fda2 	bl	800115e <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <detect_button+0x190>)
 8000622:	f000 fd9c 	bl	800115e <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	20000000 	.word	0x20000000
 8000634:	20000085 	.word	0x20000085
 8000638:	20000086 	.word	0x20000086
 800063c:	20000087 	.word	0x20000087
 8000640:	20000088 	.word	0x20000088
 8000644:	20000089 	.word	0x20000089

08000648 <switchToLightTrafficMode>:

void switchToLightTrafficMode(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
    currentMode = LIGHT_TRAFFIC_MODE;
 800064e:	4b2e      	ldr	r3, [pc, #184]	@ (8000708 <switchToLightTrafficMode+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
    // Reset mode_timer mỗi lần gọi hàm
        uint32_t startTime = HAL_GetTick();  // Lấy thời gian bắt đầu
 8000654:	f000 fad6 	bl	8000c04 <HAL_GetTick>
 8000658:	6078      	str	r0, [r7, #4]

        // Đèn xanh sáng trong 20 giây
        while (HAL_GetTick() - startTime < 20000) {
 800065a:	e00e      	b.n	800067a <switchToLightTrafficMode+0x32>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);  // Bật đèn xanh PA10
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000662:	482a      	ldr	r0, [pc, #168]	@ (800070c <switchToLightTrafficMode+0xc4>)
 8000664:	f000 fd7b 	bl	800115e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);  // Tắt PA8 và PA9
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800066e:	4827      	ldr	r0, [pc, #156]	@ (800070c <switchToLightTrafficMode+0xc4>)
 8000670:	f000 fd75 	bl	800115e <HAL_GPIO_WritePin>
            countDownNum(20);
 8000674:	2014      	movs	r0, #20
 8000676:	f7ff febb 	bl	80003f0 <countDownNum>
        while (HAL_GetTick() - startTime < 20000) {
 800067a:	f000 fac3 	bl	8000c04 <HAL_GetTick>
 800067e:	4602      	mov	r2, r0
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000688:	4293      	cmp	r3, r2
 800068a:	d9e7      	bls.n	800065c <switchToLightTrafficMode+0x14>
            //detect_button();
        }

        // Sau khi 2 giây, đèn vàng sáng trong 10 giây
        startTime = HAL_GetTick();  // Cập nhật lại thời gian bắt đầu
 800068c:	f000 faba 	bl	8000c04 <HAL_GetTick>
 8000690:	6078      	str	r0, [r7, #4]
        while (HAL_GetTick() - startTime < 3000) {
 8000692:	e00e      	b.n	80006b2 <switchToLightTrafficMode+0x6a>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // Bật đèn vàng PA9
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069a:	481c      	ldr	r0, [pc, #112]	@ (800070c <switchToLightTrafficMode+0xc4>)
 800069c:	f000 fd5f 	bl	800115e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_10, GPIO_PIN_RESET);  // Tắt PA8 và PA10
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80006a6:	4819      	ldr	r0, [pc, #100]	@ (800070c <switchToLightTrafficMode+0xc4>)
 80006a8:	f000 fd59 	bl	800115e <HAL_GPIO_WritePin>
            countDownNum(3);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f7ff fe9f 	bl	80003f0 <countDownNum>
        while (HAL_GetTick() - startTime < 3000) {
 80006b2:	f000 faa7 	bl	8000c04 <HAL_GetTick>
 80006b6:	4602      	mov	r2, r0
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d9e7      	bls.n	8000694 <switchToLightTrafficMode+0x4c>
            //detect_button();
        }

        // Sau 3 giây, đèn đỏ sáng trong 30 giây
        startTime = HAL_GetTick();  // Cập nhật lại thời gian bắt đầu
 80006c4:	f000 fa9e 	bl	8000c04 <HAL_GetTick>
 80006c8:	6078      	str	r0, [r7, #4]
        while (HAL_GetTick() - startTime < 30000) {
 80006ca:	e00e      	b.n	80006ea <switchToLightTrafficMode+0xa2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  // Bật đèn đỏ PA8
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d2:	480e      	ldr	r0, [pc, #56]	@ (800070c <switchToLightTrafficMode+0xc4>)
 80006d4:	f000 fd43 	bl	800115e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);  // Tắt PA9 và PA10
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <switchToLightTrafficMode+0xc4>)
 80006e0:	f000 fd3d 	bl	800115e <HAL_GPIO_WritePin>
            countDownNum(30);
 80006e4:	201e      	movs	r0, #30
 80006e6:	f7ff fe83 	bl	80003f0 <countDownNum>
        while (HAL_GetTick() - startTime < 30000) {
 80006ea:	f000 fa8b 	bl	8000c04 <HAL_GetTick>
 80006ee:	4602      	mov	r2, r0
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d9e7      	bls.n	80006cc <switchToLightTrafficMode+0x84>
            //detect_button();
        }
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000084 	.word	0x20000084
 800070c:	40010800 	.word	0x40010800

08000710 <switchToHeavyTrafficMode>:

void switchToHeavyTrafficMode(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    currentMode = HEAVY_TRAFFIC_MODE;
 8000716:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <switchToHeavyTrafficMode+0xbc>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]

    uint32_t mode_timer = HAL_GetTick();
 800071c:	f000 fa72 	bl	8000c04 <HAL_GetTick>
 8000720:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - mode_timer < 60000) {
 8000722:	e00e      	b.n	8000742 <switchToHeavyTrafficMode+0x32>
    	// 60s đèn xanh
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072a:	4829      	ldr	r0, [pc, #164]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 800072c:	f000 fd17 	bl	800115e <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000736:	4826      	ldr	r0, [pc, #152]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 8000738:	f000 fd11 	bl	800115e <HAL_GPIO_WritePin>
    	countDownNum(60);
 800073c:	203c      	movs	r0, #60	@ 0x3c
 800073e:	f7ff fe57 	bl	80003f0 <countDownNum>
    while (HAL_GetTick() - mode_timer < 60000) {
 8000742:	f000 fa5f 	bl	8000c04 <HAL_GetTick>
 8000746:	4602      	mov	r2, r0
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000750:	4293      	cmp	r3, r2
 8000752:	d9e7      	bls.n	8000724 <switchToHeavyTrafficMode+0x14>
    	//detect_button();
    }

    mode_timer = HAL_GetTick();
 8000754:	f000 fa56 	bl	8000c04 <HAL_GetTick>
 8000758:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - mode_timer < 5000) {
 800075a:	e00e      	b.n	800077a <switchToHeavyTrafficMode+0x6a>
    	// 5s đèn vàng
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000762:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 8000764:	f000 fcfb 	bl	800115e <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800076e:	4818      	ldr	r0, [pc, #96]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 8000770:	f000 fcf5 	bl	800115e <HAL_GPIO_WritePin>
    	countDownNum(5);
 8000774:	2005      	movs	r0, #5
 8000776:	f7ff fe3b 	bl	80003f0 <countDownNum>
    while (HAL_GetTick() - mode_timer < 5000) {
 800077a:	f000 fa43 	bl	8000c04 <HAL_GetTick>
 800077e:	4602      	mov	r2, r0
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000788:	4293      	cmp	r3, r2
 800078a:	d9e7      	bls.n	800075c <switchToHeavyTrafficMode+0x4c>
    	//detect_button();
    }

    mode_timer = HAL_GetTick();
 800078c:	f000 fa3a 	bl	8000c04 <HAL_GetTick>
 8000790:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - mode_timer < 70000) {
 8000792:	e00e      	b.n	80007b2 <switchToHeavyTrafficMode+0xa2>
    	// 70s đèn đỏ
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 800079c:	f000 fcdf 	bl	800115e <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80007a6:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <switchToHeavyTrafficMode+0xc0>)
 80007a8:	f000 fcd9 	bl	800115e <HAL_GPIO_WritePin>
    	countDownNum(70);
 80007ac:	2046      	movs	r0, #70	@ 0x46
 80007ae:	f7ff fe1f 	bl	80003f0 <countDownNum>
    while (HAL_GetTick() - mode_timer < 70000) {
 80007b2:	f000 fa27 	bl	8000c04 <HAL_GetTick>
 80007b6:	4602      	mov	r2, r0
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <switchToHeavyTrafficMode+0xc4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d9e8      	bls.n	8000794 <switchToHeavyTrafficMode+0x84>
    	//detect_button();
    }
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000084 	.word	0x20000084
 80007d0:	40010800 	.word	0x40010800
 80007d4:	0001116f 	.word	0x0001116f

080007d8 <switchToNightMode>:

void switchToNightMode(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
    currentMode = NIGHT_MODE;
 80007de:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <switchToNightMode+0x74>)
 80007e0:	2203      	movs	r2, #3
 80007e2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80007ea:	4819      	ldr	r0, [pc, #100]	@ (8000850 <switchToNightMode+0x78>)
 80007ec:	f000 fcb7 	bl	800115e <HAL_GPIO_WritePin>
    uint32_t time_now = HAL_GetTick();
 80007f0:	f000 fa08 	bl	8000c04 <HAL_GetTick>
 80007f4:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - time_now < 500) {
 80007f6:	e007      	b.n	8000808 <switchToNightMode+0x30>
    	detect_button();
 80007f8:	f7ff fe50 	bl	800049c <detect_button>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000802:	4813      	ldr	r0, [pc, #76]	@ (8000850 <switchToNightMode+0x78>)
 8000804:	f000 fcab 	bl	800115e <HAL_GPIO_WritePin>
    while (HAL_GetTick() - time_now < 500) {
 8000808:	f000 f9fc 	bl	8000c04 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000816:	d3ef      	bcc.n	80007f8 <switchToNightMode+0x20>
    }

    time_now = HAL_GetTick();
 8000818:	f000 f9f4 	bl	8000c04 <HAL_GetTick>
 800081c:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - time_now < 500) {
 800081e:	e007      	b.n	8000830 <switchToNightMode+0x58>
    	detect_button();
 8000820:	f7ff fe3c 	bl	800049c <detect_button>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <switchToNightMode+0x78>)
 800082c:	f000 fc97 	bl	800115e <HAL_GPIO_WritePin>
    while (HAL_GetTick() - time_now < 500) {
 8000830:	f000 f9e8 	bl	8000c04 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800083e:	d3ef      	bcc.n	8000820 <switchToNightMode+0x48>
    }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000084 	.word	0x20000084
 8000850:	40010800 	.word	0x40010800

08000854 <switchToControlMode>:

void switchToControlMode(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
    currentMode = CONTROL_MODE;
 800085a:	4b4c      	ldr	r3, [pc, #304]	@ (800098c <switchToControlMode+0x138>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
    if (lastbutton == 0) {
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <switchToControlMode+0x13c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d122      	bne.n	80008b0 <switchToControlMode+0x5c>
    	if (direction == 0) {
 800086a:	4b4a      	ldr	r3, [pc, #296]	@ (8000994 <switchToControlMode+0x140>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10e      	bne.n	8000892 <switchToControlMode+0x3e>
    		detect_button();
 8000874:	f7ff fe12 	bl	800049c <detect_button>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800087e:	4846      	ldr	r0, [pc, #280]	@ (8000998 <switchToControlMode+0x144>)
 8000880:	f000 fc6d 	bl	800115e <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800088a:	4843      	ldr	r0, [pc, #268]	@ (8000998 <switchToControlMode+0x144>)
 800088c:	f000 fc67 	bl	800115e <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
    	    }*/
    	}
    }
}
 8000890:	e077      	b.n	8000982 <switchToControlMode+0x12e>
    		detect_button();
 8000892:	f7ff fe03 	bl	800049c <detect_button>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089c:	483e      	ldr	r0, [pc, #248]	@ (8000998 <switchToControlMode+0x144>)
 800089e:	f000 fc5e 	bl	800115e <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80008a8:	483b      	ldr	r0, [pc, #236]	@ (8000998 <switchToControlMode+0x144>)
 80008aa:	f000 fc58 	bl	800115e <HAL_GPIO_WritePin>
}
 80008ae:	e068      	b.n	8000982 <switchToControlMode+0x12e>
    else if (lastbutton == 1) {
 80008b0:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <switchToControlMode+0x13c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d163      	bne.n	8000982 <switchToControlMode+0x12e>
    	if (direction == 0) {
 80008ba:	4b36      	ldr	r3, [pc, #216]	@ (8000994 <switchToControlMode+0x140>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d11e      	bne.n	8000902 <switchToControlMode+0xae>
    		uint32_t start_time  = HAL_GetTick();
 80008c4:	f000 f99e 	bl	8000c04 <HAL_GetTick>
 80008c8:	6038      	str	r0, [r7, #0]
    		lastbutton = 0;
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <switchToControlMode+0x13c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
    		while (HAL_GetTick() - start_time < 8000) {
 80008d0:	e00e      	b.n	80008f0 <switchToControlMode+0x9c>
    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d8:	482f      	ldr	r0, [pc, #188]	@ (8000998 <switchToControlMode+0x144>)
 80008da:	f000 fc40 	bl	800115e <HAL_GPIO_WritePin>
    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80008e4:	482c      	ldr	r0, [pc, #176]	@ (8000998 <switchToControlMode+0x144>)
 80008e6:	f000 fc3a 	bl	800115e <HAL_GPIO_WritePin>
    			countDownNum(8);
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff fd80 	bl	80003f0 <countDownNum>
    		while (HAL_GetTick() - start_time < 8000) {
 80008f0:	f000 f988 	bl	8000c04 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80008fe:	d3e8      	bcc.n	80008d2 <switchToControlMode+0x7e>
}
 8000900:	e03f      	b.n	8000982 <switchToControlMode+0x12e>
    	else if (direction != 0) {
 8000902:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <switchToControlMode+0x140>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d03a      	beq.n	8000982 <switchToControlMode+0x12e>
    		lastbutton = 0;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <switchToControlMode+0x13c>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
    	    uint32_t start_time  = HAL_GetTick();
 8000912:	f000 f977 	bl	8000c04 <HAL_GetTick>
 8000916:	6078      	str	r0, [r7, #4]
    	    while (HAL_GetTick() - start_time < 5000) {
 8000918:	e00e      	b.n	8000938 <switchToControlMode+0xe4>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000920:	481d      	ldr	r0, [pc, #116]	@ (8000998 <switchToControlMode+0x144>)
 8000922:	f000 fc1c 	bl	800115e <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092c:	481a      	ldr	r0, [pc, #104]	@ (8000998 <switchToControlMode+0x144>)
 800092e:	f000 fc16 	bl	800115e <HAL_GPIO_WritePin>
    	    	countDownNum(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f7ff fd5c 	bl	80003f0 <countDownNum>
    	    while (HAL_GetTick() - start_time < 5000) {
 8000938:	f000 f964 	bl	8000c04 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000946:	4293      	cmp	r3, r2
 8000948:	d9e7      	bls.n	800091a <switchToControlMode+0xc6>
    	    start_time = HAL_GetTick();
 800094a:	f000 f95b 	bl	8000c04 <HAL_GetTick>
 800094e:	6078      	str	r0, [r7, #4]
    	    while (HAL_GetTick() - start_time < 3000) {
 8000950:	e00e      	b.n	8000970 <switchToControlMode+0x11c>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <switchToControlMode+0x144>)
 800095a:	f000 fc00 	bl	800115e <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <switchToControlMode+0x144>)
 8000966:	f000 fbfa 	bl	800115e <HAL_GPIO_WritePin>
    	    	countDownNum(3);
 800096a:	2003      	movs	r0, #3
 800096c:	f7ff fd40 	bl	80003f0 <countDownNum>
    	    while (HAL_GetTick() - start_time < 3000) {
 8000970:	f000 f948 	bl	8000c04 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800097e:	4293      	cmp	r3, r2
 8000980:	d9e7      	bls.n	8000952 <switchToControlMode+0xfe>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000084 	.word	0x20000084
 8000990:	20000088 	.word	0x20000088
 8000994:	20000089 	.word	0x20000089
 8000998:	40010800 	.word	0x40010800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_MspInit+0x60>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_MspInit+0x60>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1c      	ldr	r2, [pc, #112]	@ (8000a98 <HAL_SPI_MspInit+0x8c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d131      	bne.n	8000a90 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a1a      	ldr	r2, [pc, #104]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_SPI_MspInit+0x90>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a5c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <HAL_SPI_MspInit+0x94>)
 8000a72:	f000 f9d9 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_SPI_MspInit+0x94>)
 8000a8c:	f000 f9cc 	bl	8000e28 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40003800 	.word	0x40003800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f874 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff fff8 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b24:	4c09      	ldr	r4, [pc, #36]	@ (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 f995 	bl	8001e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fb09 	bl	800014c <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b44:	08001ef8 	.word	0x08001ef8
  ldr r2, =_sbss
 8000b48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b4c:	20000094 	.word	0x20000094

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f92b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff ff1a 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f935 	bl	8000e0e <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000004 	.word	0x20000004
 8000bd8:	2000000c 	.word	0x2000000c
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	2000000c 	.word	0x2000000c
 8000c00:	20000090 	.word	0x20000090

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000090 	.word	0x20000090

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000000c 	.word	0x2000000c

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	@ 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff49 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff5e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffb0 	bl	8000d7c <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	@ 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	@ (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	@ (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	@ (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	@ (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	@ (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	@ (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	@ (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	@ (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	@ (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	@ (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	@ (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	@ 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	@ 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	@ (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	@ (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	@ (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	@ (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	@ (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	492c      	ldr	r1, [pc, #176]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	4922      	ldr	r1, [pc, #136]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4918      	ldr	r1, [pc, #96]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	@ (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	@ 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800117a:	e003      	b.n	8001184 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	041a      	lsls	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
	...

08001190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e272      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8087 	beq.w	80012be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b0:	4b92      	ldr	r3, [pc, #584]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d00c      	beq.n	80011d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011bc:	4b8f      	ldr	r3, [pc, #572]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d112      	bne.n	80011ee <HAL_RCC_OscConfig+0x5e>
 80011c8:	4b8c      	ldr	r3, [pc, #560]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d4:	d10b      	bne.n	80011ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	4b89      	ldr	r3, [pc, #548]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d06c      	beq.n	80012bc <HAL_RCC_OscConfig+0x12c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d168      	bne.n	80012bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e24c      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x76>
 80011f8:	4b80      	ldr	r3, [pc, #512]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a7f      	ldr	r2, [pc, #508]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e02e      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b7b      	ldr	r3, [pc, #492]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a7a      	ldr	r2, [pc, #488]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b78      	ldr	r3, [pc, #480]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a77      	ldr	r2, [pc, #476]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e01d      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0xbc>
 8001232:	4b72      	ldr	r3, [pc, #456]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a71      	ldr	r2, [pc, #452]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6f      	ldr	r3, [pc, #444]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6e      	ldr	r2, [pc, #440]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xd4>
 800124c:	4b6b      	ldr	r3, [pc, #428]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a6a      	ldr	r2, [pc, #424]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b68      	ldr	r3, [pc, #416]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a67      	ldr	r2, [pc, #412]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcca 	bl	8000c04 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcc6 	bl	8000c04 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	@ 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e200      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xe4>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fcb6 	bl	8000c04 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcb2 	bl	8000c04 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	@ 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1ec      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b53      	ldr	r3, [pc, #332]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x10c>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ca:	4b4c      	ldr	r3, [pc, #304]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012d6:	4b49      	ldr	r3, [pc, #292]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d11c      	bne.n	800131c <HAL_RCC_OscConfig+0x18c>
 80012e2:	4b46      	ldr	r3, [pc, #280]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d116      	bne.n	800131c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b43      	ldr	r3, [pc, #268]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x176>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1c0      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4939      	ldr	r1, [pc, #228]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	e03a      	b.n	8001392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <HAL_RCC_OscConfig+0x270>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fc6b 	bl	8000c04 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fc67 	bl	8000c04 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1a1      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4927      	ldr	r1, [pc, #156]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_RCC_OscConfig+0x270>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc4a 	bl	8000c04 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fc46 	bl	8000c04 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e180      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d03a      	beq.n	8001414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d019      	beq.n	80013da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_RCC_OscConfig+0x274>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc2a 	bl	8000c04 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc26 	bl	8000c04 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e160      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fa9c 	bl	8001910 <RCC_Delay>
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_RCC_OscConfig+0x274>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fc10 	bl	8000c04 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	e00f      	b.n	8001408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc0c 	bl	8000c04 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d908      	bls.n	8001408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e146      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	42420000 	.word	0x42420000
 8001404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	4b92      	ldr	r3, [pc, #584]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e9      	bne.n	80013e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a6 	beq.w	800156e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b8b      	ldr	r3, [pc, #556]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a87      	ldr	r2, [pc, #540]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b85      	ldr	r3, [pc, #532]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <HAL_RCC_OscConfig+0x4c8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <HAL_RCC_OscConfig+0x4c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7e      	ldr	r2, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x4c8>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fbcd 	bl	8000c04 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fbc9 	bl	8000c04 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	@ 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e103      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b75      	ldr	r3, [pc, #468]	@ (8001658 <HAL_RCC_OscConfig+0x4c8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x312>
 8001494:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a6e      	ldr	r2, [pc, #440]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	e02d      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a69      	ldr	r2, [pc, #420]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b67      	ldr	r3, [pc, #412]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a66      	ldr	r2, [pc, #408]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x356>
 80014cc:	4b61      	ldr	r3, [pc, #388]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a60      	ldr	r2, [pc, #384]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x36e>
 80014e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a57      	ldr	r2, [pc, #348]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fb7d 	bl	8000c04 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb79 	bl	8000c04 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0b1      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b4b      	ldr	r3, [pc, #300]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x37e>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb67 	bl	8000c04 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fb63 	bl	8000c04 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e09b      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b3c      	ldr	r3, [pc, #240]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b36      	ldr	r3, [pc, #216]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d061      	beq.n	8001648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d146      	bne.n	800161a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b33      	ldr	r3, [pc, #204]	@ (800165c <HAL_RCC_OscConfig+0x4cc>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb37 	bl	8000c04 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb33 	bl	8000c04 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e06d      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c0:	d108      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c2:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4921      	ldr	r1, [pc, #132]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a19      	ldr	r1, [r3, #32]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	430b      	orrs	r3, r1
 80015e6:	491b      	ldr	r1, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x4cc>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb07 	bl	8000c04 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fb03 	bl	8000c04 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e03d      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x46a>
 8001618:	e035      	b.n	8001686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_RCC_OscConfig+0x4cc>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff faf0 	bl	8000c04 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff faec 	bl	8000c04 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e026      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x498>
 8001646:	e01e      	b.n	8001686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e019      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_OscConfig+0x500>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	429a      	cmp	r2, r3
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0d0      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d910      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b67      	ldr	r3, [pc, #412]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 0207 	bic.w	r2, r3, #7
 80016be:	4965      	ldr	r1, [pc, #404]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d040      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d115      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e073      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06b      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001772:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 0203 	bic.w	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4936      	ldr	r1, [pc, #216]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001784:	f7ff fa3e 	bl	8000c04 <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7ff fa3a 	bl	8000c04 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e053      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 020c 	and.w	r2, r3, #12
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1eb      	bne.n	800178c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d210      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4922      	ldr	r1, [pc, #136]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001822:	f000 f821 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1cc>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1d0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f99c 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	40021000 	.word	0x40021000
 800185c:	08001ecc 	.word	0x08001ecc
 8001860:	20000004 	.word	0x20000004
 8001864:	20000008 	.word	0x20000008

08001868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x30>
 8001892:	2b08      	cmp	r3, #8
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x36>
 8001896:	e027      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x98>)
 800189a:	613b      	str	r3, [r7, #16]
      break;
 800189c:	e027      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x94>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	0c5b      	lsrs	r3, r3, #17
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ca:	fb03 f202 	mul.w	r2, r3, r2
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e004      	b.n	80018e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	613b      	str	r3, [r7, #16]
      break;
 80018e6:	e002      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ea:	613b      	str	r3, [r7, #16]
      break;
 80018ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ee:	693b      	ldr	r3, [r7, #16]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	007a1200 	.word	0x007a1200
 8001904:	08001edc 	.word	0x08001edc
 8001908:	08001eec 	.word	0x08001eec
 800190c:	003d0900 	.word	0x003d0900

08001910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <RCC_Delay+0x34>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <RCC_Delay+0x38>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a5b      	lsrs	r3, r3, #9
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800192c:	bf00      	nop
  }
  while (Delay --);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1e5a      	subs	r2, r3, #1
 8001932:	60fa      	str	r2, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f9      	bne.n	800192c <RCC_Delay+0x1c>
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000004 	.word	0x20000004
 8001948:	10624dd3 	.word	0x10624dd3

0800194c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e076      	b.n	8001a4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800196e:	d009      	beq.n	8001984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
 8001976:	e005      	b.n	8001984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff f834 	bl	8000a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a08:	ea42 0103 	orr.w	r1, r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	0c1a      	lsrs	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f002 0204 	and.w	r2, r2, #4
 8001a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a64:	f7ff f8ce 	bl	8000c04 <HAL_GetTick>
 8001a68:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e12a      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_SPI_Transmit+0x36>
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e122      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_SPI_Transmit+0x48>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e11b      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aea:	d10f      	bne.n	8001b0c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001afa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	d007      	beq.n	8001b2a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b32:	d152      	bne.n	8001bda <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_SPI_Transmit+0xee>
 8001b3c:	8b7b      	ldrh	r3, [r7, #26]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d145      	bne.n	8001bce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	881a      	ldrh	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	1c9a      	adds	r2, r3, #2
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b66:	e032      	b.n	8001bce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d112      	bne.n	8001b9c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	1c9a      	adds	r2, r3, #2
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b9a:	e018      	b.n	8001bce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b9c:	f7ff f832 	bl	8000c04 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d803      	bhi.n	8001bb4 <HAL_SPI_Transmit+0x160>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb2:	d102      	bne.n	8001bba <HAL_SPI_Transmit+0x166>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e082      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1c7      	bne.n	8001b68 <HAL_SPI_Transmit+0x114>
 8001bd8:	e053      	b.n	8001c82 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_Transmit+0x194>
 8001be2:	8b7b      	ldrh	r3, [r7, #26]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d147      	bne.n	8001c78 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c0e:	e033      	b.n	8001c78 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d113      	bne.n	8001c46 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c44:	e018      	b.n	8001c78 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c46:	f7fe ffdd 	bl	8000c04 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d803      	bhi.n	8001c5e <HAL_SPI_Transmit+0x20a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d102      	bne.n	8001c64 <HAL_SPI_Transmit+0x210>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e02d      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1c6      	bne.n	8001c10 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f8b0 	bl	8001dec <SPI_EndRxTxTransaction>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cec:	f7fe ff8a 	bl	8000c04 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cfc:	f7fe ff82 	bl	8000c04 <HAL_GetTick>
 8001d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d02:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	015b      	lsls	r3, r3, #5
 8001d08:	0d1b      	lsrs	r3, r3, #20
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d12:	e054      	b.n	8001dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d050      	beq.n	8001dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d1c:	f7fe ff72 	bl	8000c04 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d902      	bls.n	8001d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d13d      	bne.n	8001dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d4a:	d111      	bne.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d54:	d004      	beq.n	8001d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5e:	d107      	bne.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d78:	d10f      	bne.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e017      	b.n	8001dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d19b      	bne.n	8001d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000004 	.word	0x20000004

08001dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2102      	movs	r1, #2
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff ff6a 	bl	8001cdc <SPI_WaitFlagStateUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	f043 0220 	orr.w	r2, r3, #32
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e013      	b.n	8001e46 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff ff57 	bl	8001cdc <SPI_WaitFlagStateUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e000      	b.n	8001e46 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <memset>:
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4402      	add	r2, r0
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d100      	bne.n	8001e58 <memset+0xa>
 8001e56:	4770      	bx	lr
 8001e58:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5c:	e7f9      	b.n	8001e52 <memset+0x4>
	...

08001e60 <__libc_init_array>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	2600      	movs	r6, #0
 8001e64:	4d0c      	ldr	r5, [pc, #48]	@ (8001e98 <__libc_init_array+0x38>)
 8001e66:	4c0d      	ldr	r4, [pc, #52]	@ (8001e9c <__libc_init_array+0x3c>)
 8001e68:	1b64      	subs	r4, r4, r5
 8001e6a:	10a4      	asrs	r4, r4, #2
 8001e6c:	42a6      	cmp	r6, r4
 8001e6e:	d109      	bne.n	8001e84 <__libc_init_array+0x24>
 8001e70:	f000 f81a 	bl	8001ea8 <_init>
 8001e74:	2600      	movs	r6, #0
 8001e76:	4d0a      	ldr	r5, [pc, #40]	@ (8001ea0 <__libc_init_array+0x40>)
 8001e78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea4 <__libc_init_array+0x44>)
 8001e7a:	1b64      	subs	r4, r4, r5
 8001e7c:	10a4      	asrs	r4, r4, #2
 8001e7e:	42a6      	cmp	r6, r4
 8001e80:	d105      	bne.n	8001e8e <__libc_init_array+0x2e>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e88:	4798      	blx	r3
 8001e8a:	3601      	adds	r6, #1
 8001e8c:	e7ee      	b.n	8001e6c <__libc_init_array+0xc>
 8001e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e92:	4798      	blx	r3
 8001e94:	3601      	adds	r6, #1
 8001e96:	e7f2      	b.n	8001e7e <__libc_init_array+0x1e>
 8001e98:	08001ef0 	.word	0x08001ef0
 8001e9c:	08001ef0 	.word	0x08001ef0
 8001ea0:	08001ef0 	.word	0x08001ef0
 8001ea4:	08001ef4 	.word	0x08001ef4

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
